name: Continuous Integration

on:
  # Triggers para PRs
  pull_request:
    branches: ['main', 'frontend', 'backend', 'docs']
    types: [opened, synchronize, reopened]

  # Triggers para pushes diretos (apenas branches de desenvolvimento)
  push:
    branches: ['frontend', 'backend', 'docs']
    paths-ignore:
      - '**.md'
      - '.github/**'
      - 'docs/**'

# Define permissões mínimas necessárias
permissions:
  contents: read
  pull-requests: write

jobs:
  # Validação específica para PRs direcionados à main
  validate-main-pr:
    if: github.base_ref == 'main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Validate files changed
        uses: actions/github-script@v6
        with:
          script: |
            const { owner, repo } = context.repo;
            const pr_number = context.issue.number;

            // Busca arquivos modificados
            const response = await github.rest.pulls.listFiles({
              owner,
              repo,
              pull_number: pr_number,
            });

            const files = response.data.map(file => file.filename);
            const allowedFiles = [
              'README.md',
              'LICENSE',
              '.gitignore',
              '.github/workflows/'
            ];

            // Verifica se há arquivos não permitidos
            const invalidFiles = files.filter(file => {
              return !allowedFiles.some(allowed => 
                file === allowed || file.startsWith(allowed)
              );
            });

            if (invalidFiles.length > 0) {
              core.setFailed(`PR para main contém arquivos não permitidos:\n${invalidFiles.join('\n')}`);
            }

  # CI para frontend
  frontend-ci:
    if: |
      (github.base_ref == 'frontend' || github.ref == 'refs/heads/frontend') &&
      !contains(github.event.head_commit.message, '[skip ci]')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Type check
        run: npm run tsc --noEmit

      - name: Lint
        run: |
          npm run lint
          npm run prettier

      - name: Run tests
        run: npm test

      - name: Build
        run: npm run build

  # CI para backend
  backend-ci:
    if: |
      (github.base_ref == 'backend' || github.ref == 'refs/heads/backend') &&
      !contains(github.event.head_commit.message, '[skip ci]')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Type check
        run: npm run tsc --noEmit

      - name: Lint
        run: |
          npm run lint
          npm run prettier

      - name: Run tests
        run: npm test

      - name: Build
        run: npm run build

  # CI para documentação
  docs-ci:
    if: |
      (github.base_ref == 'docs' || github.ref == 'refs/heads/docs') &&
      !contains(github.event.head_commit.message, '[skip ci]')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Check Markdown links
        uses: gaurav-nelson/github-action-markdown-link-check@v1
        with:
          use-quiet-mode: 'yes'
          config-file: '.github/workflows/mlc_config.json'

      - name: Check Markdown formatting
        run: |
          npm install -g prettier
          prettier --check "**/*.md" "**/*.mdx"

  # Job final que agrega os resultados
  ci-status:
    needs: [validate-main-pr, frontend-ci, backend-ci, docs-ci]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Check CI status
        uses: actions/github-script@v6
        with:
          script: |
            const jobs = ['validate-main-pr', 'frontend-ci', 'backend-ci', 'docs-ci'];
            const results = jobs.map(job => context.job[job]?.result);

            if (results.some(result => result === 'failure')) {
              core.setFailed('Um ou mais jobs falharam');
            }
